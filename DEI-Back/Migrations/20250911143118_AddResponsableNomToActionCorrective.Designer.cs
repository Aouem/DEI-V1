// <auto-generated />
using System;
using DEI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DEI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250911143118_AddResponsableNomToActionCorrective")]
    partial class AddResponsableNomToActionCorrective
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DEI.Models.ActionCorrective", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateEcheance")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("EstTerminee")
                        .HasColumnType("bit");

                    b.Property<int>("EvenementIndesirableId")
                        .HasColumnType("int");

                    b.Property<string>("ResponsableId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("EvenementIndesirableId");

                    b.HasIndex("ResponsableId");

                    b.ToTable("ActionsCorrectives");
                });

            modelBuilder.Entity("DEI.Models.AlarmAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AlarmResponseId")
                        .HasColumnType("int");

                    b.Property<string>("Categorie")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Commentaire")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Reponse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SousCategorie")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AlarmResponseId");

                    b.ToTable("AlarmAnswers");
                });

            modelBuilder.Entity("DEI.Models.AlarmResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("AlarmResponses");
                });

            modelBuilder.Entity("DEI.Models.EvenementIndesirable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("AutreElement")
                        .HasColumnType("bit");

                    b.Property<string>("AutreElementPrecision")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("BienAutre")
                        .HasColumnType("bit");

                    b.Property<string>("BienAutrePrecision")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("BienConfusion")
                        .HasColumnType("bit");

                    b.Property<bool?>("BienDeterioration")
                        .HasColumnType("bit");

                    b.Property<bool?>("BienPerte")
                        .HasColumnType("bit");

                    b.Property<bool?>("BienVol")
                        .HasColumnType("bit");

                    b.Property<string>("CausesImmediates")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("CausesProfondes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCloture")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeclaration")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateDetection")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateSurvenue")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeclarantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("DescriptionFaits")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("DossierAccesNonAutorise")
                        .HasColumnType("bit");

                    b.Property<bool?>("DossierAutre")
                        .HasColumnType("bit");

                    b.Property<string>("DossierAutrePrecision")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("DossierIncomplet")
                        .HasColumnType("bit");

                    b.Property<bool?>("DossierInfoManquante")
                        .HasColumnType("bit");

                    b.Property<bool?>("DossierMalRedige")
                        .HasColumnType("bit");

                    b.Property<bool?>("DossierPatient")
                        .HasColumnType("bit");

                    b.Property<string>("DossierPatientPrecision")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("DossierPerte")
                        .HasColumnType("bit");

                    b.Property<bool?>("DroitAccesDossier")
                        .HasColumnType("bit");

                    b.Property<bool?>("DroitAutre")
                        .HasColumnType("bit");

                    b.Property<string>("DroitAutrePrecision")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("DroitChoixMedecin")
                        .HasColumnType("bit");

                    b.Property<bool?>("DroitConfidentialite")
                        .HasColumnType("bit");

                    b.Property<bool?>("DroitConsentement")
                        .HasColumnType("bit");

                    b.Property<bool?>("DroitDignite")
                        .HasColumnType("bit");

                    b.Property<bool?>("DroitInfoAbsente")
                        .HasColumnType("bit");

                    b.Property<bool?>("DroitReligion")
                        .HasColumnType("bit");

                    b.Property<bool?>("EnvAir")
                        .HasColumnType("bit");

                    b.Property<bool?>("EnvAnimaux")
                        .HasColumnType("bit");

                    b.Property<bool?>("EnvAutre")
                        .HasColumnType("bit");

                    b.Property<string>("EnvAutrePrecision")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("EnvDechets")
                        .HasColumnType("bit");

                    b.Property<bool?>("EnvEau")
                        .HasColumnType("bit");

                    b.Property<bool?>("EnvInsectes")
                        .HasColumnType("bit");

                    b.Property<bool?>("EnvOdeur")
                        .HasColumnType("bit");

                    b.Property<bool?>("EnvPollution")
                        .HasColumnType("bit");

                    b.Property<string>("Evaluation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EvaluationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("EvaluationEfficace")
                        .HasColumnType("bit");

                    b.Property<bool?>("EvaluationInefficace")
                        .HasColumnType("bit");

                    b.Property<string>("EvaluationResponsable")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("Evitable")
                        .IsRequired()
                        .HasColumnType("bit");

                    b.Property<int>("FamilleEvenementIndesirableId")
                        .HasColumnType("int");

                    b.Property<bool?>("Fournisseur")
                        .HasColumnType("bit");

                    b.Property<string>("FournisseurPrecision")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gravite")
                        .HasColumnType("int");

                    b.Property<bool?>("HotelAutre")
                        .HasColumnType("bit");

                    b.Property<string>("HotelAutrePrecision")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("HotelChambreSale")
                        .HasColumnType("bit");

                    b.Property<bool?>("HotelDouche")
                        .HasColumnType("bit");

                    b.Property<bool?>("HotelLingeSale")
                        .HasColumnType("bit");

                    b.Property<bool?>("HotelLit")
                        .HasColumnType("bit");

                    b.Property<bool?>("HotelPoubelle")
                        .HasColumnType("bit");

                    b.Property<bool?>("IdentiteAutre")
                        .HasColumnType("bit");

                    b.Property<string>("IdentiteAutrePrecision")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IdentiteConfusion")
                        .HasColumnType("bit");

                    b.Property<bool?>("IdentiteDoublon")
                        .HasColumnType("bit");

                    b.Property<bool?>("IdentiteEchange")
                        .HasColumnType("bit");

                    b.Property<string>("Localisation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("MaterielConcerne")
                        .HasColumnType("bit");

                    b.Property<string>("MaterielConcernePrecision")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MesureImmediat")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool?>("NatureAccueilAbsenceEcoute")
                        .HasColumnType("bit");

                    b.Property<bool?>("NatureAccueilAutre")
                        .HasColumnType("bit");

                    b.Property<string>("NatureAccueilAutrePrecision")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("NatureAccueilCommViolente")
                        .HasColumnType("bit");

                    b.Property<bool?>("NatureAccueilComportement")
                        .HasColumnType("bit");

                    b.Property<bool?>("NatureAccueilErreurOrientation")
                        .HasColumnType("bit");

                    b.Property<bool?>("NatureAccueilManqueInfo")
                        .HasColumnType("bit");

                    b.Property<bool?>("NatureSoinsAutre")
                        .HasColumnType("bit");

                    b.Property<string>("NatureSoinsAutrePrecision")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("NatureSoinsChutePatient")
                        .HasColumnType("bit");

                    b.Property<bool?>("NatureSoinsComplication")
                        .HasColumnType("bit");

                    b.Property<bool?>("NatureSoinsDefautTransmission")
                        .HasColumnType("bit");

                    b.Property<bool?>("NatureSoinsErreurMedicamenteuse")
                        .HasColumnType("bit");

                    b.Property<bool?>("NatureSoinsEscarre")
                        .HasColumnType("bit");

                    b.Property<bool?>("NatureSoinsFugue")
                        .HasColumnType("bit");

                    b.Property<bool?>("NatureSoinsInfection")
                        .HasColumnType("bit");

                    b.Property<bool?>("NatureSoinsRetardPEC")
                        .HasColumnType("bit");

                    b.Property<bool?>("NatureSoinsRetardTraitement")
                        .HasColumnType("bit");

                    b.Property<bool?>("OrgAutre")
                        .HasColumnType("bit");

                    b.Property<string>("OrgAutrePrecision")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("OrgDefaillanceInfo")
                        .HasColumnType("bit");

                    b.Property<bool?>("OrgErreurCommande")
                        .HasColumnType("bit");

                    b.Property<bool?>("OrgGestionStock")
                        .HasColumnType("bit");

                    b.Property<bool?>("OrgInterruptionAppro")
                        .HasColumnType("bit");

                    b.Property<bool?>("OrgRetardLivraison")
                        .HasColumnType("bit");

                    b.Property<bool?>("OrgRuptureStock")
                        .HasColumnType("bit");

                    b.Property<bool?>("Personnel")
                        .HasColumnType("bit");

                    b.Property<string>("PersonnelPrecision")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("RestoAutre")
                        .HasColumnType("bit");

                    b.Property<string>("RestoAutrePrecision")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("RestoAvarie")
                        .HasColumnType("bit");

                    b.Property<bool?>("RestoDegoutant")
                        .HasColumnType("bit");

                    b.Property<bool?>("RestoIntoxication")
                        .HasColumnType("bit");

                    b.Property<bool?>("RestoRegime")
                        .HasColumnType("bit");

                    b.Property<bool?>("RestoRetard")
                        .HasColumnType("bit");

                    b.Property<bool?>("RestoVaisselle")
                        .HasColumnType("bit");

                    b.Property<bool?>("RisqueAES")
                        .HasColumnType("bit");

                    b.Property<bool?>("RisqueAutre")
                        .HasColumnType("bit");

                    b.Property<string>("RisqueAutrePrecision")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("RisqueBlessure")
                        .HasColumnType("bit");

                    b.Property<bool?>("RisqueChimique")
                        .HasColumnType("bit");

                    b.Property<bool?>("RisqueChute")
                        .HasColumnType("bit");

                    b.Property<bool?>("RisqueHarcelement")
                        .HasColumnType("bit");

                    b.Property<bool?>("RisqueInfection")
                        .HasColumnType("bit");

                    b.Property<bool?>("RisqueMaladiePro")
                        .HasColumnType("bit");

                    b.Property<bool?>("RisquePsycho")
                        .HasColumnType("bit");

                    b.Property<bool?>("RisqueRadioactif")
                        .HasColumnType("bit");

                    b.Property<bool?>("RisqueTMS")
                        .HasColumnType("bit");

                    b.Property<bool?>("SecuAgression")
                        .HasColumnType("bit");

                    b.Property<bool?>("SecuAutre")
                        .HasColumnType("bit");

                    b.Property<string>("SecuAutrePrecision")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("SecuChantier")
                        .HasColumnType("bit");

                    b.Property<bool?>("SecuEffondrement")
                        .HasColumnType("bit");

                    b.Property<bool?>("SecuExplosion")
                        .HasColumnType("bit");

                    b.Property<bool?>("SecuIncendie")
                        .HasColumnType("bit");

                    b.Property<bool?>("SecuInondation")
                        .HasColumnType("bit");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.Property<int>("Statut")
                        .HasColumnType("int");

                    b.Property<bool?>("TechAscenseur")
                        .HasColumnType("bit");

                    b.Property<bool?>("TechAutre")
                        .HasColumnType("bit");

                    b.Property<string>("TechAutrePrecision")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("TechClimatisation")
                        .HasColumnType("bit");

                    b.Property<bool?>("TechElectricite")
                        .HasColumnType("bit");

                    b.Property<bool?>("TechEquipement")
                        .HasColumnType("bit");

                    b.Property<bool?>("TechFluides")
                        .HasColumnType("bit");

                    b.Property<bool?>("TechPlomberie")
                        .HasColumnType("bit");

                    b.Property<bool?>("TransportAbsence")
                        .HasColumnType("bit");

                    b.Property<bool?>("TransportAutre")
                        .HasColumnType("bit");

                    b.Property<string>("TransportAutrePrecision")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("TransportCollision")
                        .HasColumnType("bit");

                    b.Property<bool?>("TransportDefectueux")
                        .HasColumnType("bit");

                    b.Property<bool?>("TransportNonEquipe")
                        .HasColumnType("bit");

                    b.Property<bool?>("TransportPanne")
                        .HasColumnType("bit");

                    b.Property<bool?>("TransportRetard")
                        .HasColumnType("bit");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<bool?>("Usager")
                        .HasColumnType("bit");

                    b.Property<string>("UsagerPrecision")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Visiteur")
                        .HasColumnType("bit");

                    b.Property<string>("VisiteurPrecision")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DeclarantId");

                    b.HasIndex("FamilleEvenementIndesirableId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Evenements");
                });

            modelBuilder.Entity("DEI.Models.FamilleEvenementIndesirable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FamillesEvenements");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nom = "Default"
                        });
                });

            modelBuilder.Entity("DEI.Models.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nom")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Nom")
                        .IsUnique()
                        .HasFilter("[Nom] IS NOT NULL");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nom = "Direction Générale"
                        });
                });

            modelBuilder.Entity("DEI.Models.Utilisateur", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Fonction")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ServiceId")
                        .HasColumnType("int");

                    b.Property<string>("Tel")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("ServiceId");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Utilisateurs");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Email = "admin@example.com",
                            Fonction = "Administrateur",
                            Password = "AQAAAAIAAYagAAAAELffbMUDpy4jRrCsxJ/DkwBZ5oQClikO/l4GLT0AoJXZtjWOiIGPRp4yUOtxMuTITg==",
                            Role = "ADMIN",
                            ServiceId = 1,
                            Tel = "12345678",
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("DEI.Models.ActionCorrective", b =>
                {
                    b.HasOne("DEI.Models.EvenementIndesirable", "EvenementIndesirable")
                        .WithMany("ActionsCorrectives")
                        .HasForeignKey("EvenementIndesirableId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DEI.Models.Utilisateur", "Responsable")
                        .WithMany("ActionsCorrectivesResponsable")
                        .HasForeignKey("ResponsableId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("EvenementIndesirable");

                    b.Navigation("Responsable");
                });

            modelBuilder.Entity("DEI.Models.AlarmAnswer", b =>
                {
                    b.HasOne("DEI.Models.AlarmResponse", "AlarmResponse")
                        .WithMany("Reponses")
                        .HasForeignKey("AlarmResponseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AlarmResponse");
                });

            modelBuilder.Entity("DEI.Models.EvenementIndesirable", b =>
                {
                    b.HasOne("DEI.Models.Utilisateur", "Declarant")
                        .WithMany("EvenementsDeclarés")
                        .HasForeignKey("DeclarantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DEI.Models.FamilleEvenementIndesirable", "Famille")
                        .WithMany("Evenements")
                        .HasForeignKey("FamilleEvenementIndesirableId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DEI.Models.Service", null)
                        .WithMany("Evenements")
                        .HasForeignKey("ServiceId");

                    b.Navigation("Declarant");

                    b.Navigation("Famille");
                });

            modelBuilder.Entity("DEI.Models.Utilisateur", b =>
                {
                    b.HasOne("DEI.Models.Service", "Service")
                        .WithMany("Utilisateurs")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Service");
                });

            modelBuilder.Entity("DEI.Models.AlarmResponse", b =>
                {
                    b.Navigation("Reponses");
                });

            modelBuilder.Entity("DEI.Models.EvenementIndesirable", b =>
                {
                    b.Navigation("ActionsCorrectives");
                });

            modelBuilder.Entity("DEI.Models.FamilleEvenementIndesirable", b =>
                {
                    b.Navigation("Evenements");
                });

            modelBuilder.Entity("DEI.Models.Service", b =>
                {
                    b.Navigation("Evenements");

                    b.Navigation("Utilisateurs");
                });

            modelBuilder.Entity("DEI.Models.Utilisateur", b =>
                {
                    b.Navigation("ActionsCorrectivesResponsable");

                    b.Navigation("EvenementsDeclarés");
                });
#pragma warning restore 612, 618
        }
    }
}
